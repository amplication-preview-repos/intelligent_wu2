/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Reference as PrismaReference,
  Compound as PrismaCompound,
} from "@prisma/client";

export class ReferenceServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ReferenceCountArgs, "select">
  ): Promise<number> {
    return this.prisma.reference.count(args);
  }

  async references(
    args: Prisma.ReferenceFindManyArgs
  ): Promise<PrismaReference[]> {
    return this.prisma.reference.findMany(args);
  }
  async reference(
    args: Prisma.ReferenceFindUniqueArgs
  ): Promise<PrismaReference | null> {
    return this.prisma.reference.findUnique(args);
  }
  async createReference(
    args: Prisma.ReferenceCreateArgs
  ): Promise<PrismaReference> {
    return this.prisma.reference.create(args);
  }
  async updateReference(
    args: Prisma.ReferenceUpdateArgs
  ): Promise<PrismaReference> {
    return this.prisma.reference.update(args);
  }
  async deleteReference(
    args: Prisma.ReferenceDeleteArgs
  ): Promise<PrismaReference> {
    return this.prisma.reference.delete(args);
  }

  async getCompound(parentId: string): Promise<PrismaCompound | null> {
    return this.prisma.reference
      .findUnique({
        where: { id: parentId },
      })
      .compound();
  }
}
