/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ReferenceService } from "../reference.service";
import { ReferenceCreateInput } from "./ReferenceCreateInput";
import { Reference } from "./Reference";
import { ReferenceFindManyArgs } from "./ReferenceFindManyArgs";
import { ReferenceWhereUniqueInput } from "./ReferenceWhereUniqueInput";
import { ReferenceUpdateInput } from "./ReferenceUpdateInput";

export class ReferenceControllerBase {
  constructor(protected readonly service: ReferenceService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Reference })
  async createReference(
    @common.Body() data: ReferenceCreateInput
  ): Promise<Reference> {
    return await this.service.createReference({
      data: {
        ...data,

        compound: data.compound
          ? {
              connect: data.compound,
            }
          : undefined,
      },
      select: {
        authors: true,

        compound: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        doi: true,
        id: true,
        journal: true,
        title: true,
        updatedAt: true,
        year: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Reference] })
  @ApiNestedQuery(ReferenceFindManyArgs)
  async references(@common.Req() request: Request): Promise<Reference[]> {
    const args = plainToClass(ReferenceFindManyArgs, request.query);
    return this.service.references({
      ...args,
      select: {
        authors: true,

        compound: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        doi: true,
        id: true,
        journal: true,
        title: true,
        updatedAt: true,
        year: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Reference })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async reference(
    @common.Param() params: ReferenceWhereUniqueInput
  ): Promise<Reference | null> {
    const result = await this.service.reference({
      where: params,
      select: {
        authors: true,

        compound: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        doi: true,
        id: true,
        journal: true,
        title: true,
        updatedAt: true,
        year: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Reference })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateReference(
    @common.Param() params: ReferenceWhereUniqueInput,
    @common.Body() data: ReferenceUpdateInput
  ): Promise<Reference | null> {
    try {
      return await this.service.updateReference({
        where: params,
        data: {
          ...data,

          compound: data.compound
            ? {
                connect: data.compound,
              }
            : undefined,
        },
        select: {
          authors: true,

          compound: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          doi: true,
          id: true,
          journal: true,
          title: true,
          updatedAt: true,
          year: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Reference })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteReference(
    @common.Param() params: ReferenceWhereUniqueInput
  ): Promise<Reference | null> {
    try {
      return await this.service.deleteReference({
        where: params,
        select: {
          authors: true,

          compound: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          doi: true,
          id: true,
          journal: true,
          title: true,
          updatedAt: true,
          year: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
