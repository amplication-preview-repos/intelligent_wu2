/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SynonymService } from "../synonym.service";
import { SynonymCreateInput } from "./SynonymCreateInput";
import { Synonym } from "./Synonym";
import { SynonymFindManyArgs } from "./SynonymFindManyArgs";
import { SynonymWhereUniqueInput } from "./SynonymWhereUniqueInput";
import { SynonymUpdateInput } from "./SynonymUpdateInput";

export class SynonymControllerBase {
  constructor(protected readonly service: SynonymService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Synonym })
  async createSynonym(
    @common.Body() data: SynonymCreateInput
  ): Promise<Synonym> {
    return await this.service.createSynonym({
      data: {
        ...data,

        compound: data.compound
          ? {
              connect: data.compound,
            }
          : undefined,
      },
      select: {
        compound: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        synonym: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Synonym] })
  @ApiNestedQuery(SynonymFindManyArgs)
  async synonyms(@common.Req() request: Request): Promise<Synonym[]> {
    const args = plainToClass(SynonymFindManyArgs, request.query);
    return this.service.synonyms({
      ...args,
      select: {
        compound: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        synonym: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Synonym })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async synonym(
    @common.Param() params: SynonymWhereUniqueInput
  ): Promise<Synonym | null> {
    const result = await this.service.synonym({
      where: params,
      select: {
        compound: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        synonym: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Synonym })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSynonym(
    @common.Param() params: SynonymWhereUniqueInput,
    @common.Body() data: SynonymUpdateInput
  ): Promise<Synonym | null> {
    try {
      return await this.service.updateSynonym({
        where: params,
        data: {
          ...data,

          compound: data.compound
            ? {
                connect: data.compound,
              }
            : undefined,
        },
        select: {
          compound: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,
          synonym: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Synonym })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSynonym(
    @common.Param() params: SynonymWhereUniqueInput
  ): Promise<Synonym | null> {
    try {
      return await this.service.deleteSynonym({
        where: params,
        select: {
          compound: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,
          synonym: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
