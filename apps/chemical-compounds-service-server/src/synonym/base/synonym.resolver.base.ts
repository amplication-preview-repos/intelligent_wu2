/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Synonym } from "./Synonym";
import { SynonymCountArgs } from "./SynonymCountArgs";
import { SynonymFindManyArgs } from "./SynonymFindManyArgs";
import { SynonymFindUniqueArgs } from "./SynonymFindUniqueArgs";
import { CreateSynonymArgs } from "./CreateSynonymArgs";
import { UpdateSynonymArgs } from "./UpdateSynonymArgs";
import { DeleteSynonymArgs } from "./DeleteSynonymArgs";
import { Compound } from "../../compound/base/Compound";
import { SynonymService } from "../synonym.service";
@graphql.Resolver(() => Synonym)
export class SynonymResolverBase {
  constructor(protected readonly service: SynonymService) {}

  async _synonymsMeta(
    @graphql.Args() args: SynonymCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Synonym])
  async synonyms(
    @graphql.Args() args: SynonymFindManyArgs
  ): Promise<Synonym[]> {
    return this.service.synonyms(args);
  }

  @graphql.Query(() => Synonym, { nullable: true })
  async synonym(
    @graphql.Args() args: SynonymFindUniqueArgs
  ): Promise<Synonym | null> {
    const result = await this.service.synonym(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Synonym)
  async createSynonym(
    @graphql.Args() args: CreateSynonymArgs
  ): Promise<Synonym> {
    return await this.service.createSynonym({
      ...args,
      data: {
        ...args.data,

        compound: args.data.compound
          ? {
              connect: args.data.compound,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Synonym)
  async updateSynonym(
    @graphql.Args() args: UpdateSynonymArgs
  ): Promise<Synonym | null> {
    try {
      return await this.service.updateSynonym({
        ...args,
        data: {
          ...args.data,

          compound: args.data.compound
            ? {
                connect: args.data.compound,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Synonym)
  async deleteSynonym(
    @graphql.Args() args: DeleteSynonymArgs
  ): Promise<Synonym | null> {
    try {
      return await this.service.deleteSynonym(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Compound, {
    nullable: true,
    name: "compound",
  })
  async getCompound(
    @graphql.Parent() parent: Synonym
  ): Promise<Compound | null> {
    const result = await this.service.getCompound(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
