/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CompoundService } from "../compound.service";
import { CompoundCreateInput } from "./CompoundCreateInput";
import { Compound } from "./Compound";
import { CompoundFindManyArgs } from "./CompoundFindManyArgs";
import { CompoundWhereUniqueInput } from "./CompoundWhereUniqueInput";
import { CompoundUpdateInput } from "./CompoundUpdateInput";
import { PropertyFindManyArgs } from "../../property/base/PropertyFindManyArgs";
import { Property } from "../../property/base/Property";
import { PropertyWhereUniqueInput } from "../../property/base/PropertyWhereUniqueInput";
import { ReferenceFindManyArgs } from "../../reference/base/ReferenceFindManyArgs";
import { Reference } from "../../reference/base/Reference";
import { ReferenceWhereUniqueInput } from "../../reference/base/ReferenceWhereUniqueInput";
import { SynonymFindManyArgs } from "../../synonym/base/SynonymFindManyArgs";
import { Synonym } from "../../synonym/base/Synonym";
import { SynonymWhereUniqueInput } from "../../synonym/base/SynonymWhereUniqueInput";

export class CompoundControllerBase {
  constructor(protected readonly service: CompoundService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Compound })
  async createCompound(
    @common.Body() data: CompoundCreateInput
  ): Promise<Compound> {
    return await this.service.createCompound({
      data: data,
      select: {
        createdAt: true,
        id: true,
        inChI: true,
        iupacName: true,
        molecularFormula: true,
        molecularWeight: true,
        name: true,
        smiles: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Compound] })
  @ApiNestedQuery(CompoundFindManyArgs)
  async compounds(@common.Req() request: Request): Promise<Compound[]> {
    const args = plainToClass(CompoundFindManyArgs, request.query);
    return this.service.compounds({
      ...args,
      select: {
        createdAt: true,
        id: true,
        inChI: true,
        iupacName: true,
        molecularFormula: true,
        molecularWeight: true,
        name: true,
        smiles: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Compound })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async compound(
    @common.Param() params: CompoundWhereUniqueInput
  ): Promise<Compound | null> {
    const result = await this.service.compound({
      where: params,
      select: {
        createdAt: true,
        id: true,
        inChI: true,
        iupacName: true,
        molecularFormula: true,
        molecularWeight: true,
        name: true,
        smiles: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Compound })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCompound(
    @common.Param() params: CompoundWhereUniqueInput,
    @common.Body() data: CompoundUpdateInput
  ): Promise<Compound | null> {
    try {
      return await this.service.updateCompound({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          inChI: true,
          iupacName: true,
          molecularFormula: true,
          molecularWeight: true,
          name: true,
          smiles: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Compound })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCompound(
    @common.Param() params: CompoundWhereUniqueInput
  ): Promise<Compound | null> {
    try {
      return await this.service.deleteCompound({
        where: params,
        select: {
          createdAt: true,
          id: true,
          inChI: true,
          iupacName: true,
          molecularFormula: true,
          molecularWeight: true,
          name: true,
          smiles: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/properties")
  @ApiNestedQuery(PropertyFindManyArgs)
  async findProperties(
    @common.Req() request: Request,
    @common.Param() params: CompoundWhereUniqueInput
  ): Promise<Property[]> {
    const query = plainToClass(PropertyFindManyArgs, request.query);
    const results = await this.service.findProperties(params.id, {
      ...query,
      select: {
        compound: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        propertyType: true,
        updatedAt: true,
        value: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/properties")
  async connectProperties(
    @common.Param() params: CompoundWhereUniqueInput,
    @common.Body() body: PropertyWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      properties: {
        connect: body,
      },
    };
    await this.service.updateCompound({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/properties")
  async updateProperties(
    @common.Param() params: CompoundWhereUniqueInput,
    @common.Body() body: PropertyWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      properties: {
        set: body,
      },
    };
    await this.service.updateCompound({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/properties")
  async disconnectProperties(
    @common.Param() params: CompoundWhereUniqueInput,
    @common.Body() body: PropertyWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      properties: {
        disconnect: body,
      },
    };
    await this.service.updateCompound({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/references")
  @ApiNestedQuery(ReferenceFindManyArgs)
  async findReferences(
    @common.Req() request: Request,
    @common.Param() params: CompoundWhereUniqueInput
  ): Promise<Reference[]> {
    const query = plainToClass(ReferenceFindManyArgs, request.query);
    const results = await this.service.findReferences(params.id, {
      ...query,
      select: {
        authors: true,

        compound: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        doi: true,
        id: true,
        journal: true,
        title: true,
        updatedAt: true,
        year: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/references")
  async connectReferences(
    @common.Param() params: CompoundWhereUniqueInput,
    @common.Body() body: ReferenceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      references: {
        connect: body,
      },
    };
    await this.service.updateCompound({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/references")
  async updateReferences(
    @common.Param() params: CompoundWhereUniqueInput,
    @common.Body() body: ReferenceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      references: {
        set: body,
      },
    };
    await this.service.updateCompound({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/references")
  async disconnectReferences(
    @common.Param() params: CompoundWhereUniqueInput,
    @common.Body() body: ReferenceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      references: {
        disconnect: body,
      },
    };
    await this.service.updateCompound({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/synonyms")
  @ApiNestedQuery(SynonymFindManyArgs)
  async findSynonyms(
    @common.Req() request: Request,
    @common.Param() params: CompoundWhereUniqueInput
  ): Promise<Synonym[]> {
    const query = plainToClass(SynonymFindManyArgs, request.query);
    const results = await this.service.findSynonyms(params.id, {
      ...query,
      select: {
        compound: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        synonym: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/synonyms")
  async connectSynonyms(
    @common.Param() params: CompoundWhereUniqueInput,
    @common.Body() body: SynonymWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      synonyms: {
        connect: body,
      },
    };
    await this.service.updateCompound({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/synonyms")
  async updateSynonyms(
    @common.Param() params: CompoundWhereUniqueInput,
    @common.Body() body: SynonymWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      synonyms: {
        set: body,
      },
    };
    await this.service.updateCompound({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/synonyms")
  async disconnectSynonyms(
    @common.Param() params: CompoundWhereUniqueInput,
    @common.Body() body: SynonymWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      synonyms: {
        disconnect: body,
      },
    };
    await this.service.updateCompound({
      where: params,
      data,
      select: { id: true },
    });
  }
}
