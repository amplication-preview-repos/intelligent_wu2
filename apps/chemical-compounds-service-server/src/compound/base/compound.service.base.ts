/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Compound as PrismaCompound,
  Property as PrismaProperty,
  Reference as PrismaReference,
  Synonym as PrismaSynonym,
} from "@prisma/client";

export class CompoundServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.CompoundCountArgs, "select">): Promise<number> {
    return this.prisma.compound.count(args);
  }

  async compounds(
    args: Prisma.CompoundFindManyArgs
  ): Promise<PrismaCompound[]> {
    return this.prisma.compound.findMany(args);
  }
  async compound(
    args: Prisma.CompoundFindUniqueArgs
  ): Promise<PrismaCompound | null> {
    return this.prisma.compound.findUnique(args);
  }
  async createCompound(
    args: Prisma.CompoundCreateArgs
  ): Promise<PrismaCompound> {
    return this.prisma.compound.create(args);
  }
  async updateCompound(
    args: Prisma.CompoundUpdateArgs
  ): Promise<PrismaCompound> {
    return this.prisma.compound.update(args);
  }
  async deleteCompound(
    args: Prisma.CompoundDeleteArgs
  ): Promise<PrismaCompound> {
    return this.prisma.compound.delete(args);
  }

  async findProperties(
    parentId: string,
    args: Prisma.PropertyFindManyArgs
  ): Promise<PrismaProperty[]> {
    return this.prisma.compound
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .properties(args);
  }

  async findReferences(
    parentId: string,
    args: Prisma.ReferenceFindManyArgs
  ): Promise<PrismaReference[]> {
    return this.prisma.compound
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .references(args);
  }

  async findSynonyms(
    parentId: string,
    args: Prisma.SynonymFindManyArgs
  ): Promise<PrismaSynonym[]> {
    return this.prisma.compound
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .synonyms(args);
  }
}
