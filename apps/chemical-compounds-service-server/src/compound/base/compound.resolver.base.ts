/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Compound } from "./Compound";
import { CompoundCountArgs } from "./CompoundCountArgs";
import { CompoundFindManyArgs } from "./CompoundFindManyArgs";
import { CompoundFindUniqueArgs } from "./CompoundFindUniqueArgs";
import { CreateCompoundArgs } from "./CreateCompoundArgs";
import { UpdateCompoundArgs } from "./UpdateCompoundArgs";
import { DeleteCompoundArgs } from "./DeleteCompoundArgs";
import { PropertyFindManyArgs } from "../../property/base/PropertyFindManyArgs";
import { Property } from "../../property/base/Property";
import { ReferenceFindManyArgs } from "../../reference/base/ReferenceFindManyArgs";
import { Reference } from "../../reference/base/Reference";
import { SynonymFindManyArgs } from "../../synonym/base/SynonymFindManyArgs";
import { Synonym } from "../../synonym/base/Synonym";
import { CompoundService } from "../compound.service";
@graphql.Resolver(() => Compound)
export class CompoundResolverBase {
  constructor(protected readonly service: CompoundService) {}

  async _compoundsMeta(
    @graphql.Args() args: CompoundCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Compound])
  async compounds(
    @graphql.Args() args: CompoundFindManyArgs
  ): Promise<Compound[]> {
    return this.service.compounds(args);
  }

  @graphql.Query(() => Compound, { nullable: true })
  async compound(
    @graphql.Args() args: CompoundFindUniqueArgs
  ): Promise<Compound | null> {
    const result = await this.service.compound(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Compound)
  async createCompound(
    @graphql.Args() args: CreateCompoundArgs
  ): Promise<Compound> {
    return await this.service.createCompound({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Compound)
  async updateCompound(
    @graphql.Args() args: UpdateCompoundArgs
  ): Promise<Compound | null> {
    try {
      return await this.service.updateCompound({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Compound)
  async deleteCompound(
    @graphql.Args() args: DeleteCompoundArgs
  ): Promise<Compound | null> {
    try {
      return await this.service.deleteCompound(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Property], { name: "properties" })
  async findProperties(
    @graphql.Parent() parent: Compound,
    @graphql.Args() args: PropertyFindManyArgs
  ): Promise<Property[]> {
    const results = await this.service.findProperties(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Reference], { name: "references" })
  async findReferences(
    @graphql.Parent() parent: Compound,
    @graphql.Args() args: ReferenceFindManyArgs
  ): Promise<Reference[]> {
    const results = await this.service.findReferences(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Synonym], { name: "synonyms" })
  async findSynonyms(
    @graphql.Parent() parent: Compound,
    @graphql.Args() args: SynonymFindManyArgs
  ): Promise<Synonym[]> {
    const results = await this.service.findSynonyms(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
